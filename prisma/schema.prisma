generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password_hash String
  avatar        String?
  test_cases    TestCase[]
  created_at    DateTime   @default(now())

  projects UsersOnProjectsWithRoles[]

  @@map("users")
}

model Project {
  id          String     @id @default(uuid())
  name        String
  code        String
  description String?
  test_cases  TestCase[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  members UsersOnProjectsWithRoles[]

  @@map("projects")
}

enum Role {
  member
  admin
}

model UsersOnProjectsWithRoles {
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  project    Project @relation(fields: [project_id], references: [id])
  project_id String
  role       Role    @default(member)

  @@id([user_id, project_id])
  @@map("users_on_projects_with_roles")
}

enum Status {
  open
  in_progress
  error
  success
}

enum Priority {
  not_set
  high
  medium
  low
}

enum Type {
  other
  functional
  smoke
  regression
  security
  usability
  performance
  acceptance
  compatibility
  integration
  exploratory
}

enum Layer {
  not_set
  e2e
  api
  unit
}

enum Behavior {
  not_set
  positive
  negative
  destructive
}

enum AutomationStatus {
  not_automated
  to_be_automated
  automated
}

model TestCase {
  id                String           @id @default(uuid())
  title             String
  status            Status           @default(open)
  description       String?
  Project           Project?         @relation(fields: [project_id], references: [id])
  project_id        String?
  priority          Priority         @default(not_set)
  type              Type             @default(other)
  layer             Layer            @default(not_set)
  behavior          Behavior         @default(not_set)
  automation_status AutomationStatus @default(not_automated)
  deadline          DateTime?
  attachment        String?
  User              User?            @relation(fields: [assigned_to], references: [id])
  assigned_to       String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  @@map("test_cases")
}
