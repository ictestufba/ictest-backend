name: ICTest Backend CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  eslint:
    runs-on: ubuntu-latest
    container: node:18-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Check the ESLint
        run: npm run lint
  audit:
    runs-on: ubuntu-latest
    container: node:18-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Audit The Dependencies
        run: npm audit
  type_check:
    runs-on: ubuntu-latest
    container: node:18-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Check Type
        run: npm run ts.check
  unit-test:
    runs-on: ubuntu-latest
    container: node:18-alpine
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm run test
  e2e-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: bitnami/postgresql
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: docker
          POSTGRESQL_PASSWORD: docker
          POSTGRESQL_DATABASE: ictest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npm run test:e2e
        env:
          JWT_SECRET: testing
          DATABASE_URL: "postgresql://docker:docker@localhost:5432/ictest?schema=public"
  build:
    runs-on: ubuntu-latest
    container: node:18-alpine
    needs: [eslint,audit,type_check,unit_test,e2e_test]
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Build the javascript
        run: npm run build
  run-migration:
    runs-on: ubuntu-latest
    container: node:18-alpine
    needs: [build]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Run migrations
        run: npx prisma migrate dev
    env:
      NODE_ENV: production
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
  deploy: 
    runs-on: ubuntu-latest
    needs: [run-migration]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Set Env Vars on Vercel Project
        uses: dkershner6/vercel-set-env-action@v3
        with:
          token: ${{ secrets.VERCEL_TOKEN }}
          projectName: ictest-backend
          envVariableKeys: NODE_ENV,JWT_SECRET,DATABASE_URL
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          TARGET_NODE_ENV: production
          TYPE_NODE_ENV: plain
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TARGET_JWT_SECRET: production
          TYPE_JWT_SECRET: encrypted 
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TARGET_DATABASE_URL: production
          TYPE_DATABASE_URL: encrypted 
      - name: deploy api to vercel      
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-args: '--prod' 